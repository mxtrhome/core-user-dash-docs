import{_ as p}from"./send_email_activity_modal.528b4e3d.js";import{_ as i,r,o as l,c,a as s,b as n,t as d,d as e,e as t}from"./app.0788f2df.js";const u="/core-user-dash-docs/assets/section_with_section_modal.54f604e0.png",k="/core-user-dash-docs/assets/start_section.4fbb77ce.png",m="/core-user-dash-docs/assets/multiple_connections_to_single_section.f0d91ddc.png",v="/core-user-dash-docs/assets/single_to_multiple_connections.0cd8da18.png",h="/core-user-dash-docs/assets/email_click_trigger.f93cd377.png",y="/core-user-dash-docs/assets/email_open-trigger.a30d33e7.png",g="/core-user-dash-docs/assets/lead_created_trigger.b3333f02.png",b="/core-user-dash-docs/assets/lead_moved_to_tenant_trigger.3eeeb746.png",f="/core-user-dash-docs/assets/lead_compare_fied_trigger.64f1cc88.png",q="/core-user-dash-docs/assets/lead_status_changed_trigger.1aa2003b.png",w="/core-user-dash-docs/assets/lead_added_to_list_trigger.0d71028b.png",_="/core-user-dash-docs/assets/lead_removed_from_list_trigger.16024c80.png",T="/core-user-dash-docs/assets/send_notification_email_activity.a8486b3c.png",L="/core-user-dash-docs/assets/lead_add_to_list_activity.5bab03d3.png",S="/core-user-dash-docs/assets/lead_remove_from_list_activity.5507dfbb.png",A="/core-user-dash-docs/assets/lead_change_status_activity.0b96bb08.png",x="/core-user-dash-docs/assets/timer_event_activity.4df8694a.png",j="/core-user-dash-docs/assets/lead_compare_field_activity.8c788f65.png",E={},C={id:"page-title",tabindex:"-1"},I=s("a",{class:"header-anchor",href:"#page-title","aria-hidden":"true"},"#",-1),F=s("p",null,'Section or Activity is a "part" (step) of the workflow. Each section in the workflow plays its role, for example Sending an Email has an "action" role and "Lead Status changed" has a "trigger" role. But it is not the full list of the Sections and Their Roles.',-1),B=s("h2",{id:"activity-entity",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#activity-entity","aria-hidden":"true"},"#"),n(" Activity entity")],-1),R=n("If you try to create some new section you will notice that Section item (item of workflow schema) and "),N={href:"/workflows/sectionModals",target:"_blank",rel:"noopener noreferrer"},O=n("Section Modal"),V=n(" contains the same information, to be exact Section Modal is exists to update and add Section information. "),W=s("img",{src:u,alt:"Section with Section Modal"},null,-1),M=n(" So this Information or Data must be saved in Section Entity which usually looks like this:"),U=t(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> activity <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token comment">// uuidv</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token comment">// activity name from the &quot;constants/canvas/activities&quot;,</span>
    <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// contains all the information for specific activity that must be saved on the back-end side</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
        <span class="token literal-property property">role</span><span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token comment">// activity role form the &quot;constants/canvas/sectionRoles&quot;</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// contains visual parts of the section that must be rendered on the UI (not sends to the back-end)</span>
        <span class="token literal-property property">primaryBtn</span><span class="token operator">:</span> Object<span class="token punctuation">,</span>
        <span class="token literal-property property">nextSectionStrokeLeft</span><span class="token operator">:</span> Object<span class="token punctuation">,</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),J=s("li",null,[s("strong",null,"id"),n(" - is an identifier of the Activity, and it is unified around all other workflow activities and even around all Workflows")],-1),D=s("li",null,[s("strong",null,"type"),n(" - displays the name of the Activity, all available types you can find in the list of "),s("a",{href:"#section-types"},"section types")],-1),P=s("strong",null,"state",-1),z=n(" - this prop must contain all the data that was selected in "),G={href:"/workflows/sectionModals",target:"_blank",rel:"noopener noreferrer"},Y=n("Section Modal"),H=n(", moreover "),K=s("strong",null,"state",-1),$=n(" for each activity must contain "),Q=s("strong",null,"role",-1),X=n(" property that displays "),Z=s("a",{href:"#section-roles"},"section role",-1),ss=s("li",null,[s("strong",null,"items"),n(" - is a collection of graphical items based on these items we draw schemas in our canvas. This property is not saves on the backend side, we build them based on Activity "),s("strong",null,"type"),n(" and "),s("strong",null,"role"),n(" on the UI (read more here: "),s("a",{href:"#activity-draw-process"},"Activity draw process"),n(").")],-1),ns=t(`<h2 id="section-roles" tabindex="-1"><a class="header-anchor" href="#section-roles" aria-hidden="true">#</a> Section Roles</h2><p>List of the existing Section Roles (<code>src/constants/canvas/sectionRoles.js</code>):</p><ul><li><strong>start</strong> - Start section role</li><li><strong>action</strong> - Action sections role</li><li><strong>trigger</strong> - Role for trigger sections</li><li><strong>fork</strong> - System role it uses for sections branching</li><li><strong>join</strong> - Another system role, uses for joining section into a single branch</li><li><strong>finish</strong> - Finish section role</li><li><strong>delay</strong> - Timer section role</li><li><strong>condition</strong> - True/False statements section role</li></ul><h2 id="section-types" tabindex="-1"><a class="header-anchor" href="#section-types" aria-hidden="true">#</a> Section types</h2><p>List of the existing Section types (Activities) (<code>src/constants/canvas/activities.js</code>):</p><ul><li><a href="#start">Start</a></li><li><a href="#join">Join</a></li><li><a href="#fork">Fork</a></li><li><a href="#emailclicktrigger">EmailClickTrigger</a></li><li><a href="#emailopentrigger">EmailOpenTrigger</a></li><li><a href="#leadcreatedtrigger">LeadCreatedTrigger</a></li><li><a href="#leadmovedtotenanttrigger">LeadMovedToTenantTrigger</a></li><li><a href="#leadcomparefieldtrigger">LeadCompareFieldTrigger</a></li><li><a href="#leadstatuschangedtrigger">LeadStatusChangedTrigger</a></li><li><a href="#leadaddedtolisttrigger">LeadAddedToListTrigger</a></li><li><a href="#leadremovedfromlisttrigger">LeadRemovedFromListTrigger</a></li><li><a href="#sendemailactivity">SendEmailActivity</a></li><li><a href="#sendnotificationemailactivity">SendNotificationEmailActivity</a></li><li><a href="#leadaddtolistactivity">LeadAddToListActivity</a></li><li><a href="#leadremovefromlistactivity">LeadRemoveFromListActivity</a></li><li><a href="#leadchangestatusactivity">LeadChangeStatusActivity</a></li><li><a href="#timerevent">TimerEvent</a></li><li><a href="#leadcomparefieldactivity">LeadCompareFieldActivity</a></li></ul><p>We have next mapping for <strong>Activities</strong> and their <strong>roles</strong> (<code>src/constants/canvas/sectionRoles.js</code>):</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> rolesActivitiesMap <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>sectionRoles<span class="token punctuation">.</span>start<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">[</span>activityTypes<span class="token punctuation">.</span>Start<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>sectionRoles<span class="token punctuation">.</span>fork<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">[</span>activityTypes<span class="token punctuation">.</span>Fork<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>sectionRoles<span class="token punctuation">.</span>join<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">[</span>activityTypes<span class="token punctuation">.</span>Join<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>sectionRoles<span class="token punctuation">.</span>finish<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">[</span>activityTypes<span class="token punctuation">.</span>Finish<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>sectionRoles<span class="token punctuation">.</span>delay<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">[</span>activityTypes<span class="token punctuation">.</span>TimerEvent<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>sectionRoles<span class="token punctuation">.</span>action<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        activityTypes<span class="token punctuation">.</span>SendEmailActivity<span class="token punctuation">,</span>
        activityTypes<span class="token punctuation">.</span>SendNotificationEmailActivity<span class="token punctuation">,</span>
        activityTypes<span class="token punctuation">.</span>LeadAddToListActivity<span class="token punctuation">,</span>
        activityTypes<span class="token punctuation">.</span>LeadRemoveFromListActivity<span class="token punctuation">,</span>
        activityTypes<span class="token punctuation">.</span>LeadChangeFieldValueActivity<span class="token punctuation">,</span>
        activityTypes<span class="token punctuation">.</span>LeadChangeStatusActivity<span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>sectionRoles<span class="token punctuation">.</span>trigger<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        activityTypes<span class="token punctuation">.</span>EmailClickTrigger<span class="token punctuation">,</span>
        activityTypes<span class="token punctuation">.</span>EmailVisitTrigger<span class="token punctuation">,</span>
        activityTypes<span class="token punctuation">.</span>EmailOpenTrigger<span class="token punctuation">,</span>
        activityTypes<span class="token punctuation">.</span>LeadCompareFieldTrigger<span class="token punctuation">,</span>
        activityTypes<span class="token punctuation">.</span>LeadOwnedByTrigger<span class="token punctuation">,</span>
        activityTypes<span class="token punctuation">.</span>LeadHasDateFieldTrigger<span class="token punctuation">,</span>
        activityTypes<span class="token punctuation">.</span>LeadStatusChangedTrigger<span class="token punctuation">,</span>
        activityTypes<span class="token punctuation">.</span>LeadAddedToListTrigger<span class="token punctuation">,</span>
        activityTypes<span class="token punctuation">.</span>LeadRemovedFromListTrigger<span class="token punctuation">,</span>
        activityTypes<span class="token punctuation">.</span>LeadCreatedTrigger<span class="token punctuation">,</span>
        activityTypes<span class="token punctuation">.</span>LeadMovedToTenantTrigger<span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>sectionRoles<span class="token punctuation">.</span>condition<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">[</span>activityTypes<span class="token punctuation">.</span>LeadCompareFieldActivity<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="start" tabindex="-1"><a class="header-anchor" href="#start" aria-hidden="true">#</a> Start</h3><p><strong>Start</strong> section creates automatically for each Workflow once you open &quot;Create Workflow&quot; or &quot;Edit Workflow&quot; page. This is a first section in the workflow, but we are now saving Start section data in the Backend.</p><p><img src="`+k+`" alt="Start Section"></p><p>The entity of Start section has the same structure and properties for any Workflow</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> Start <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&quot;uuid&quot;</span><span class="token punctuation">,</span> 
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;Start&quot;</span><span class="token punctuation">,</span> 
    <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">role</span><span class="token operator">:</span> <span class="token string">&quot;start&quot;</span><span class="token punctuation">,</span> 
        <span class="token literal-property property">position</span><span class="token operator">:</span> <span class="token string">&quot;center&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> 
    <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="join" tabindex="-1"><a class="header-anchor" href="#join" aria-hidden="true">#</a> Join</h3><p>Join section does not have visual Schema item, it uses as transitional activity for making multiple connections to a single Activity, visually you can observe it as a connection net:</p><p><img src="`+m+`" alt="multiple connections to single Section"></p><p>The Join entity has next structure:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> Join <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&quot;uuid&quot;</span><span class="token punctuation">,</span> 
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;Join&quot;</span><span class="token punctuation">,</span> 
    <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">role</span><span class="token operator">:</span> <span class="token string">&quot;join&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Currently, Join uses only in one place of the workflow: after first triggers, to connect them to next Activity.</p><h3 id="fork" tabindex="-1"><a class="header-anchor" href="#fork" aria-hidden="true">#</a> Fork</h3><p>As well as Join, Fork also does not have Visual Schema item, this is also transitional Activity (this activity does not have &quot;items&quot; property). It allows us to make connections form single activity to multiple. When few Sections are laying in the same horizontal line, then we can say that these Sections are connected to the same Fork which in its turn connected to a single Activity (usually in the middle)</p><p><img src="`+v+`" alt="Single to multiple connections"></p><p>Fork Entity for the schema above will look like this:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> fork <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&quot;uuid&quot;</span><span class="token punctuation">,</span> 
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;Fork&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">role</span><span class="token operator">:</span><span class="token string">&quot;fork&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">Branches</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token string">&quot;uuid&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;uuid&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;uuid&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24),as=n("Important property here is "),es=s("strong",null,"Branches",-1),ts=n(' it is an array of "Branch IDs", analysing this List we can say that our Fork contains 3 branches, and if we look on the image above we will se 3 lines form "Send Email Activity": 2 horizontal and 1 vertical. This "Branch IDs" comes from '),os=s("strong",null,"outcome",-1),ps=n(" property of the "),is={href:"/workflows/connections",target:"_blank",rel:"noopener noreferrer"},rs=n("connection"),ls=n(" entity."),cs=t('<p>Practically we create Fork for each Activity, even if there will be a single branch (the list of &quot;Branches&quot; then can be empty), but in theory we can skip Fork creation for single branch Activities, then &quot;connection&quot; will have source and destination ids as ids of neighbour Activities.</p><h3 id="emailclicktrigger" tabindex="-1"><a class="header-anchor" href="#emailclicktrigger" aria-hidden="true">#</a> EmailClickTrigger</h3><p>EmailClickTrigger triggers when lead clicks on some button in his email or when lead clicks on specific link, this link must be provided in EmailClickTrigger modal. This Trigger can be used only after <a href="#sendemailactivity">SendEmailActivity</a> as EmailClickTrigger works for concrete email.</p><p><img src="'+h+`" alt="Email Click Trigger"></p><p>Entity:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> emailClickTrigger <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&quot;EmailClickTrigger&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&quot;uuid&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">role</span><span class="token operator">:</span> <span class="token string">&quot;trigger&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">SendEmailId</span><span class="token operator">:</span> <span class="token string">&quot;uuid&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">emailName</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
        <span class="token literal-property property">Url</span><span class="token operator">:</span> <span class="token string">&quot;url/of/the/clicked/link&quot;</span><span class="token punctuation">,</span> <span class="token comment">// url of the link inside the email</span>
        <span class="token literal-property property">comparison</span><span class="token operator">:</span> <span class="token string">&quot;exactly&quot;</span><span class="token punctuation">,</span> <span class="token comment">// one from the &quot;comparisonItems&quot; const - src/constants/canvas/emailSettings.js</span>
        <span class="token literal-property property">frequency</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token comment">// // one from the &quot;frequencyItems&quot; const - src/constants/canvas/emailSettings.js,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you may notice state prop contains all the data that user can fill in modal + <strong>SendEmailId</strong> - id of the email that this trigger would work for.</p><h3 id="emailopentrigger" tabindex="-1"><a class="header-anchor" href="#emailopentrigger" aria-hidden="true">#</a> EmailOpenTrigger</h3><p>This trigger is similar to <a href="#emailclicktrigger">EmailClickTrigger</a> and even easier. Firstly EmailOpenTrigger triggers when lead has opened an email.</p><p><img src="`+y+`" alt="Email Open Trigger"></p><p>Entity:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> emailOpenTrigger <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&quot;EmailOpenTrigger&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&quot;uuid&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">role</span><span class="token operator">:</span> <span class="token string">&quot;trigger&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">SendEmailId</span><span class="token operator">:</span> <span class="token string">&quot;uuid&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">emailName</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
        <span class="token literal-property property">comparison</span><span class="token operator">:</span> <span class="token string">&quot;exactly&quot;</span><span class="token punctuation">,</span> <span class="token comment">// one from the &quot;comparisonItems&quot; const - src/constants/canvas/emailSettings.js</span>
        <span class="token literal-property property">frequency</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token comment">// // one from the &quot;frequencyItems&quot; const - src/constants/canvas/emailSettings.js,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see the entity almost similar to <a href="#emailclicktrigger">EmailClickTrigger</a> the only difference here <strong>Url</strong> property is absent in &quot;state&quot;. <strong>state</strong></p><h3 id="leadcreatedtrigger" tabindex="-1"><a class="header-anchor" href="#leadcreatedtrigger" aria-hidden="true">#</a> LeadCreatedTrigger</h3><p>Another type of the triggers which is used as beginning triggers. LeadCreatedTrigger triggers on new lead creation under current selected tenant (by default selected tenant is a tenant of your account). Inside the modal window for this trigger we have only one field for tenant selection, but it is disabled, as now you can create LeadCreatedTrigger only for your own tenant.</p><p><img src="`+g+`" alt="Lead Created Trigger"></p><p>Entity:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> leadCreatedTrigger <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;LeadCreatedTrigger&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">role</span><span class="token operator">:</span> <span class="token string">&quot;trigger&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">Tenant</span><span class="token operator">:</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token comment">// id of the current tenant</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token comment">// name of the current tenant</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Inside the &quot;state&quot; object we need to provide current tenant ID and trigger is ready to fire.</p><h3 id="leadmovedtotenanttrigger" tabindex="-1"><a class="header-anchor" href="#leadmovedtotenanttrigger" aria-hidden="true">#</a> LeadMovedToTenantTrigger</h3><p>LeadMovedToTenantTrigger fires when lead changes own tenant or using other words Lead was moved to another tenant. This trigger is also currently uses as beginning one, so we cannot see it in the middle of the workflow schema.</p><p><img src="`+b+`" alt="Lead moved to tenant trigger"></p><p>This trigger has only one field which is a searchbar, where you can select the target tenant, where moved lead should appear.</p><p>Entity:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> leadMovedToTenantTrigger <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;LeadMovedToTenantTrigger&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">role</span><span class="token operator">:</span> <span class="token string">&quot;trigger&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">Tenant</span><span class="token operator">:</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token comment">// id of the target tenant</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token comment">// name of the target tenant</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Entity is similar to <a href="#leadcreatedtrigger">LeadCreatedTrigger</a>.</p><h3 id="leadcomparefieldtrigger" tabindex="-1"><a class="header-anchor" href="#leadcomparefieldtrigger" aria-hidden="true">#</a> LeadCompareFieldTrigger</h3><p>This trigger is used at the beginning of the workflow schema and fires once &quot;comparison expression&quot; would be fulfilled. You can compose this &quot;comparison expression&quot; inside LeadCompareFieldTrigger modal.</p><p><img src="`+f+`" alt="Lead Compare Field Trigger"></p><p>On the screenshot you can see three fields:</p><ul><li>LeadField - field from database of the lead entity</li><li>Comparator - dictates how to compare field and Value</li><li>Value - the expected value So we can say that this trigger will fire once any Leads &quot;TenantId&quot; field would be changed to any value except &quot;123&quot;.</li></ul><p>Entity:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> leadCompareFieldTrigger <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;LeadCompareFieldTrigger&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">role</span><span class="token operator">:</span> <span class="token string">&quot;trigger&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">FieldName</span><span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token comment">// name of selected field</span>
        <span class="token literal-property property">FieldId</span><span class="token operator">:</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token comment">// id of selected field</span>
        <span class="token literal-property property">Comparator</span><span class="token operator">:</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token comment">// comparator id form a list of comparators</span>
        <span class="token literal-property property">Value</span><span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token comment">// expected value of the selected field</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>List of comparators comes form <code>/api/Activity/ComparisonTypes</code></li><li>list of Fields comes form <code>api/Activity/AvailableColumns</code></li></ul><h3 id="leadstatuschangedtrigger" tabindex="-1"><a class="header-anchor" href="#leadstatuschangedtrigger" aria-hidden="true">#</a> LeadStatusChangedTrigger</h3><p>Another beginning schema trigger, which fires (or triggers) when Lead status would be changed to provided one.</p><p><img src="`+q+`" alt="Lead status Changed trigger"></p><p>Entity:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> leadStatusChangedTrigger <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;LeadStatusChangedTrigger&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">role</span><span class="token operator">:</span> <span class="token string">&quot;trigger&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token comment">// name of the expected lead status</span>
        <span class="token literal-property property">Status</span><span class="token operator">:</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token comment">// id of the expected lead status</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>List of statuses comes from <code>/api/Activity/Statuses</code> endpoint</p><h3 id="leadaddedtolisttrigger" tabindex="-1"><a class="header-anchor" href="#leadaddedtolisttrigger" aria-hidden="true">#</a> LeadAddedToListTrigger</h3><p>This trigger fires when Lead has been added to a specific LeadList. This lead list provides via section modal</p><p><img src="`+w+`" alt="Lead added to list trigger"></p><p>Entity:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> leadAddedToListTrigger <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;LeadAddedToListTrigger&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">role</span><span class="token operator">:</span> <span class="token string">&quot;trigger&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">LeadListId</span><span class="token operator">:</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token comment">// selected LeadList id</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token comment">// selected LeadList name</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>List of Leads comes from <code>/api/LeadList/LeadListCollection?tenantId={tenantId}</code> endpoint</p><h3 id="leadremovedfromlisttrigger" tabindex="-1"><a class="header-anchor" href="#leadremovedfromlisttrigger" aria-hidden="true">#</a> LeadRemovedFromListTrigger</h3><p>Trigger fires when Lead has been removed from a specific LeadList. This lead list provides via section modal. The LeadRemovedFromListTrigger has similar view and Entity with <a href="#leadaddedtolisttrigger">LeadAddedToListTrigger</a></p><p><img src="`+_+`" alt="Lead Removed From List trigger"></p><p>Entity:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> leadRemovedFromListTrigger <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;LeadRemovedFromListTrigger&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">role</span><span class="token operator">:</span> <span class="token string">&quot;trigger&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">LeadListId</span><span class="token operator">:</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token comment">// selected LeadList id</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token comment">// selected LeadList name</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>List of Leads comes from <code>/api/LeadList/LeadListCollection?tenantId={tenantId}</code> endpoint</p><h3 id="sendemailactivity" tabindex="-1"><a class="header-anchor" href="#sendemailactivity" aria-hidden="true">#</a> SendEmailActivity</h3><p>SendEmailActivity - is an activity for sending email messages to lead from the previous step. For example in the next configuration the message would be sent to the Lead that was Removed From the &quot;Niko&#39;s test list 1&quot;. Email template can be provided inside the modal, here you can search for Templates and select it.</p><p><img src="`+p+`" alt="Send Email Activity"></p><p>Entity:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> sendEmailActivity <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;SendEmailActivity&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">role</span><span class="token operator">:</span> <span class="token string">&quot;action&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">wait</span><span class="token operator">:</span> Boolean<span class="token punctuation">,</span> <span class="token comment">// wait for bussines hours checkbox</span>
        <span class="token literal-property property">thumbnail</span><span class="token operator">:</span> <span class="token string">&quot;url&quot;</span><span class="token punctuation">,</span> <span class="token comment">// selected Email Template thubnail url</span>
        <span class="token literal-property property">SendEmailId</span><span class="token operator">:</span> <span class="token string">&quot;uuid&quot;</span><span class="token punctuation">,</span> <span class="token comment">// unic id generated for concrete activity in the schema</span>
        <span class="token literal-property property">EmailTemplateId</span><span class="token operator">:</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token comment">// selected Email Template Id</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token comment">// selected Email Template name</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>After this activity we have two (in future can be more) specific triggers available that works only with &quot;SendEmailActivity&quot;:</p><ul><li><a href="#emailclicktrigger">EmailClickTrigger</a></li><li><a href="#emailopentrigger">EmailOpenTrigger</a></li></ul><h3 id="sendnotificationemailactivity" tabindex="-1"><a class="header-anchor" href="#sendnotificationemailactivity" aria-hidden="true">#</a> SendNotificationEmailActivity</h3><p>SendNotificationEmailActivity allows you to send email message (notification) to a specific list of recipients. The modal allows you to select this &quot;recipients&quot; in a few ways:</p><ul><li>from the list of tenants</li><li>provide direct email addresses</li><li>provide and Organisation type (groups of tenants)</li></ul><p><img src="`+T+`" alt="Send Notification Email Activity"></p><p>There is also possibility to select template (&quot;Use custom notification&quot; checkbox) for the email notification otherwise activity will use default template</p><p>Entity:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> sendNotificationEmailActivity <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;SendNotificationEmailActivity&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">role</span><span class="token operator">:</span> <span class="token string">&quot;action&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">emailName</span><span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token comment">// name of selectd emailTemplate or null</span>
        <span class="token literal-property property">thumbnail</span><span class="token operator">:</span> <span class="token string">&quot;url&quot;</span><span class="token punctuation">,</span> <span class="token comment">// orl of selectd emailTemplate thubnail or null</span>
        <span class="token literal-property property">UseCustomNotification</span><span class="token operator">:</span> Boolean<span class="token punctuation">,</span> <span class="token comment">// disables or enables custom Email Template usage</span>
        <span class="token literal-property property">availability</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>availability<span class="token punctuation">,</span>
        <span class="token literal-property property">EmailTemplateId</span><span class="token operator">:</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token comment">// id of selectd emailTemplate or null</span>
        <span class="token literal-property property">UserIds</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// list of slected tenant ids</span>
        <span class="token literal-property property">Emails</span><span class="token operator">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// list of provided email adresses</span>
        <span class="token literal-property property">organisationTypes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;uuid&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// list of selectd organisation types</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>List of selectd organisation types comes from /api/Activity/OrganisationTypes?tenant={tenantId}</li><li>List of Email Templates comes from <code>api/EmailTemplates/{tenantId}</code> endpoint</li></ul><p>SendNotificationEmailActivity - is universal activity because it does not have specific requirements for its usage in workflows schema, in other words you can paste it after any Activity or Trigger.</p><h3 id="leadaddtolistactivity" tabindex="-1"><a class="header-anchor" href="#leadaddtolistactivity" aria-hidden="true">#</a> LeadAddToListActivity</h3><p>This activity allows you to automatically fill the Lead Lists.</p><p><img src="`+L+`" alt="Lead Add To List Activity"></p><p>Only field here is Lead List</p><p>Entity:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> LeadAddToListActivity <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;LeadAddToListActivity&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">role</span><span class="token operator">:</span> <span class="token string">&quot;action&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">LeadListId</span><span class="token operator">:</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token comment">// id of selected lead list,</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token comment">// name of selected lead list,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>List of Leads comes from <code>/api/LeadList/LeadListCollection?tenantId={tenantId}</code> endpoint</p><h3 id="leadremovefromlistactivity" tabindex="-1"><a class="header-anchor" href="#leadremovefromlistactivity" aria-hidden="true">#</a> LeadRemoveFromListActivity</h3><p>This activity allows you to automatically remove Leads from specific Lead List.</p><p><img src="`+S+`" alt="Lead remove from List Activity"></p><p>Only field here is Lead List</p><p>Entity:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> leadRemoveFromListActivity <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;LeadRemoveFromListActivity&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">role</span><span class="token operator">:</span> <span class="token string">&quot;action&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">LeadListId</span><span class="token operator">:</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token comment">// id of selected lead list,</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token comment">// name of selected lead list,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>List of Leads comes from <code>/api/LeadList/LeadListCollection?tenantId={tenantId}</code> endpoint</p><h3 id="leadchangestatusactivity" tabindex="-1"><a class="header-anchor" href="#leadchangestatusactivity" aria-hidden="true">#</a> LeadChangeStatusActivity</h3><p>This activity can change status of the context Lead (lead form the previous step on the schema)</p><p><img src="`+A+`" alt="Lead Change Status Activity"></p><p>Entity:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> leadChangeStatusActivity <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;LeadChangeStatusActivity&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">role</span><span class="token operator">:</span> <span class="token string">&quot;action&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token comment">// selected Lead Status name,</span>
        <span class="token literal-property property">Status</span><span class="token operator">:</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token comment">// selected Lead Status id,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>List of statuses comes from <code>/api/Activity/Statuses</code> endpoint</p><h3 id="timerevent" tabindex="-1"><a class="header-anchor" href="#timerevent" aria-hidden="true">#</a> TimerEvent</h3><p>TimerEvent is specific Activity not similar to others, but it is universal (you can pass it after any activity or trigger), and it is used to create time delays before or after other activities or triggers, the only dependency this activity requires is &quot;time&quot;.</p><p><img src="`+x+`" alt="Timer Event"></p><p>Entity:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> timerEvent <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;TimerEvent&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">role</span><span class="token operator">:</span> <span class="token string">&quot;delay&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">TimeoutExpression</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">Syntax</span><span class="token operator">:</span> <span class="token string">&quot;Literal&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">Expression</span><span class="token operator">:</span> <span class="token string">&quot;0.00:00:00&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">Type</span><span class="token operator">:</span> <span class="token string">&quot;System.TimeSpan, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see this Activity requires time in the specific format, the mask for &quot;Expression&quot; property is <code>days.hours:minutes:seconds</code></p><h3 id="leadcomparefieldactivity" tabindex="-1"><a class="header-anchor" href="#leadcomparefieldactivity" aria-hidden="true">#</a> LeadCompareFieldActivity</h3><p>LeadCompareFieldActivity has specific view not similar to any other Activity above. It exists to compare Lead Field and its Value to fulfill &quot;True&quot; or &quot;False&quot; scenario after. In other words if the expression in inside LeadCompareFieldActivity modal returns True, then workflow goes by &quot;True branch&quot; otherwise by &quot;False branch&quot;</p><p><img src="`+j+`" alt="Lead Compare Field Activity"></p><p>On the screenshot you can see three fields:</p><ul><li>LeadField - field from database of the lead entity</li><li>Comparator - dictates how to compare field and Value</li><li>Value - the expected value</li></ul><p>Entity:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> leadCompareFieldActivity <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;LeadCompareFieldActivity&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">role</span><span class="token operator">:</span> <span class="token string">&quot;condition&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">FieldName</span><span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token comment">// selected lead field name</span>
        <span class="token literal-property property">FieldId</span><span class="token operator">:</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token comment">// selected lead field id</span>
        <span class="token literal-property property">Comparator</span><span class="token operator">:</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token comment">// comparator id </span>
        <span class="token literal-property property">Value</span><span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token comment">// provided comparasion value</span>
        <span class="token literal-property property">CaseInsensitive</span><span class="token operator">:</span> Boolean<span class="token punctuation">,</span> <span class="token comment">// caseInsensitive mode comparison,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>List of comparators comes form <code>/api/Activity/ComparisonTypes</code></li><li>list of Fields comes form <code>api/Activity/AvailableColumns</code></li></ul><h2 id="activity-draw-process" tabindex="-1"><a class="header-anchor" href="#activity-draw-process" aria-hidden="true">#</a> Activity draw process</h2><p>Activity entities have an <code>items</code> property and this property contains all the visual items (objects for canvas) that would be rendered on the UI side, but some Activities do not have visual part, as <a href="#join">Join</a> and <a href="#fork">Fork</a>, so <code>items</code> prop is absent for them.</p><p>Items for typical section would look like this:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token literal-property property">items</span> <span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rectangle</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">&quot;Rectangle&quot;</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">primaryBtn</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">&quot;Button&quot;</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">edit</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">&quot;Button&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">parent</span><span class="token operator">:</span> <span class="token string">&quot;6ea9f718-ae14-4558-81b7-12b813d2e33b&quot;</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">initialStroke</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">&quot;Stroke&quot;</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>So here you can see the &quot;keys&quot;: <code>rectangle</code>, <code>primaryBtn</code> ,... , these keys here does not have any technical sense, we provide them just to have understanding what the item is inside. More interesting is an <code>component</code> property under that key, this prop displays the &quot;component id&quot; or its name, the render function orients exactly on this property to find correct component to build the UI for it.</p><h3 id="workflow-rendering" tabindex="-1"><a class="header-anchor" href="#workflow-rendering" aria-hidden="true">#</a> Workflow rendering</h3><p>Once we opened &quot;Workflow edit&quot; page (<code>views/workflows/Workflow.vue</code>) the <code>renderWorkflow()</code> method is called (<code>mixins/workflow/workflow.js</code> methods). This method doing next important things:</p><ol><li>Sets canvas position to &quot;start&quot; - as in first screen you have to see <a href="#start">Start</a> section</li><li>Sets correct container sizes - to have correct position calculation for new updates in canvas</li><li>calls <code>renderTemplate()</code> method - it is used for items (sections) building</li></ol><h3 id="rendertemplate" tabindex="-1"><a class="header-anchor" href="#rendertemplate" aria-hidden="true">#</a> renderTemplate()</h3>`,111),ds=n("As you may know ("),us={href:"/workflows/technical",target:"_blank",rel:"noopener noreferrer"},ks=n("Workflow under the hood"),ms=n(") we do not save "),vs=s("code",null,".items",-1),hs=n(" data in the backend, it means that we build all the UI items each time we get Workflow data (when open page for example). So for us there is two reasons to call "),ys=s("code",null,"renderTemplate()",-1),gs=n(", first when we load the page and second when we change something in opened workflow (add/update/delete new section)."),bs=t('<p>So what is going inside <code>renderTemplate()</code> method? All we need here is to update each activity in activities list with <code>items</code> property. In the Vuex store we have two important states:</p><ul><li>activities - contains the list of all activities</li><li>sections - contains list of activities that has the visual part and each activity has <code>items</code> property with UI items. So now it is time to say that <code>renderTemplate()</code> updates <code>sections</code> state with actual list of activities and their visual components, and more important that this method calls each time we have changes in <code>activities</code> state.</li></ul><p>Describing this method step by step we have next flow</p><ol><li>Clear existing <code>sections</code> state</li><li><a href="#build-visual-part-of-the-activity">Build visual part of the activity</a></li><li>Set the result to <code>sections</code></li></ol><p>Inside <code>renderTemplate()</code> we have a loop for <code>activities</code> state, this loop calls <a href="#preparesection">prepareSection()</a></p><h3 id="preparesection" tabindex="-1"><a class="header-anchor" href="#preparesection" aria-hidden="true">#</a> prepareSection()</h3><p>Method accepts next parameters:</p>',7),fs=s("li",null,"template - looping activity or template of the future section",-1),qs=n("sourceSection - parent section in the tree, which can be found using "),ws={href:"/workflows/connections",target:"_blank",rel:"noopener noreferrer"},_s=n("connections"),Ts=s("li",null,"sections: list of already prepared sections",-1),Ls=t(`<p><strong>prepareSection()</strong> - method which based on its arguments should call correct &quot;specific method&quot; for concrete activity (here it is <code>template</code> argument). &quot;Specific method&quot; here is one of the next list : <code>prepareStartSection</code>, <code>prepareTriggerSection</code>, <code>prepareActionSection</code>, ..., as you may notice changes only middle part of the method name, this middle part is nothing else as <a href="#section-roles">section role</a>.</p><p>So now we can say that we have own &quot;prepareSection&quot; method for each section role, and <code>prepareSection()</code> exists only for call the correct one for us. If you look on any of these &quot;prepareSection&quot; methods you will actually notice that this is the place where &quot;activity&quot; gets <code>items</code> property. Let&#39;s look on the &quot;prepareStartSection&quot; for example</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>    <span class="token comment">/*...*/</span>
        <span class="token function">prepareStartSection</span><span class="token punctuation">(</span><span class="token parameter">sectionTemplate</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sectionTemplate<span class="token punctuation">.</span>items<span class="token punctuation">.</span>startBtn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createStartButton</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                <span class="token literal-property property">sectionId</span><span class="token operator">:</span> sectionTemplate<span class="token punctuation">.</span>id
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
            sectionTemplate<span class="token punctuation">.</span>items<span class="token punctuation">.</span>primaryBtn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createPrimaryBtn</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                <span class="token literal-property property">sectionId</span><span class="token operator">:</span> sectionTemplate<span class="token punctuation">.</span>id<span class="token punctuation">,</span>
                <span class="token literal-property property">source</span><span class="token operator">:</span> sectionTemplate<span class="token punctuation">.</span>items<span class="token punctuation">.</span>startBtn
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
            sectionTemplate<span class="token punctuation">.</span>items<span class="token punctuation">.</span>initialStroke <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createVerticalStroke</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                <span class="token literal-property property">source</span><span class="token operator">:</span> sectionTemplate<span class="token punctuation">.</span>items<span class="token punctuation">.</span>startBtn<span class="token punctuation">,</span>
                <span class="token literal-property property">destination</span><span class="token operator">:</span> sectionTemplate<span class="token punctuation">.</span>items<span class="token punctuation">.</span>primaryBtn
            <span class="token punctuation">}</span><span class="token punctuation">)</span>

            <span class="token keyword">return</span> sectionTemplate
        <span class="token punctuation">}</span>
    <span class="token comment">/*...*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>createStartButton()</code>, <code>createPrimaryBtn()</code>,<code>createVerticalStroke()</code> here is other type of methods, the body of these methods looks similar, and all of them returns to us a finite object which contains all the data that we need to draw this item on the UI (size, coordinates, color), and more important that exactly in this place we set <code>component</code> property for our canvas elements. You can find full list of these methods in <strong>utils.js</strong> mixin<code>mixins/workflow/utils.js</code>.</p><p>Summarising all the info above the flow from &quot;call <code>renderWorkflow()</code>&quot; to &quot;set <code>component</code> prop&quot; will look like this:</p><ul><li>renderWorkflow() - renders whole canvas container and inners</li><li>renderTemplate() - builds <code>sections</code> from <code>activities</code></li><li>prepareSection() - transitional method, that calls correct &quot;prepareSection method&quot; for provided activity (depending on role)</li><li>prepare***Section() - builds correct list of <code>items</code>, where *** is section role</li><li>create*** - method that returns finite object with all data needed for canvas element, *** is the name of the item</li></ul><h3 id="section-items" tabindex="-1"><a class="header-anchor" href="#section-items" aria-hidden="true">#</a> Section items</h3><p>So we finally have our <code>sections</code> setup, each of them has <code>items</code> property with list of objects that is ready to be rendered on the UI.</p><p>Previously we mentioned that <code>component</code> property is the most important for the <code>items</code> object, and it is true because, based on the value of this prop we build our canvas element. If you check <code>views/workflow/components/</code> directory, you will find a number of components, what more interesting for us that names of these components nothing else as values for our <code>component</code> prop. In other words &quot;section&quot; comprises components from this directory.</p><p>The matching magic happens in <strong>Section.vue</strong> component (<code>views/workflows/Section.vue</code>). We also have some composition flow to get to this place, so lets start from the beginning.</p><p><code>Workflows.vue</code>, point of entry, here we have another component call - <code>SectionsGrid.vue</code> important thing here is that we render this component in the case if <code>sections</code> state is not empty, then inside &quot;SectionsGrid.vue&quot; running through all <code>sections</code> and call for <code>Section.vue</code> component for each, and finally in <code>Section.vue</code> we have dynamic component call, which wrapped into <code>v-for</code> that loops for <code>section.items</code> and builds canvas element based on the data inside each item</p><div class="language-vue ext-vue line-numbers-mode"><pre class="language-vue"><code>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span>
        <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item in section.items<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item.component<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">:props</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item.props<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">...</span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12);function Ss(o,As){const a=r("ExternalLinkIcon");return l(),c("div",null,[s("h1",C,[I,n(" "+d(o.$page.title),1)]),F,B,s("p",null,[R,s("a",N,[O,e(a)]),V,W,M]),U,s("ul",null,[J,D,s("li",null,[P,z,s("a",G,[Y,e(a)]),H,K,$,Q,X,Z]),ss]),ns,s("p",null,[as,es,ts,os,ps,s("a",is,[rs,e(a)]),ls]),cs,s("p",null,[ds,s("a",us,[ks,e(a)]),ms,vs,hs,ys,gs]),bs,s("ul",null,[fs,s("li",null,[qs,s("a",ws,[_s,e(a)])]),Ts]),Ls])}const Es=i(E,[["render",Ss],["__file","sections.html.vue"]]);export{Es as default};
